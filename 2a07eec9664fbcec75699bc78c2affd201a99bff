{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5bcabcb7_d12a0fcd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2023-04-18T00:38:37Z",
      "side": 1,
      "message": "recheck due to an apparent CI issue",
      "revId": "2a07eec9664fbcec75699bc78c2affd201a99bff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c160519_411c70ee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2023-04-18T12:41:56Z",
      "side": 1,
      "message": "Looks good to me, but I prefer that Andrea also approves",
      "revId": "2a07eec9664fbcec75699bc78c2affd201a99bff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e73aa08_877ea413",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2023-04-18T20:49:24Z",
      "side": 1,
      "message": "The reason why I blocked the __init__ function is to avoid different initialization for different instances. In this perspective, I do agree that the message of error raised calling the __init__ method is not precise.\nNevertheless, the purpose was not to avoid different instances, blocking the __new__ method, but preventing instances with different values.\n\nAnyway, in my opinion, using the get instead of the __init__ suggests the users that they are not creating new parameters, but that the parameters are retrieved from somewhere else where they are define. \n\nLong story short, I am not sure if this change will just facilitate the user, or it will suggest that they can change the parameters with no effects on other instances, as a new instance is created with the constructor.\n\nBut for sure I think I have a biased opinion on this, so if you think this change would facilitate the user I think we should do it.\n\n",
      "revId": "2a07eec9664fbcec75699bc78c2affd201a99bff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1dbd5867_725fd9d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2023-04-18T23:01:19Z",
      "side": 1,
      "message": "Well, since the existing code actually \"has no effect\", I think that a better way of conveying the information of \"hey, this is a singleton, beware\" would be to call that type a `SimParamsSharedSingleton` or something like that. Ultimately, I think it will be just cleaner to pass the options around instead of trying to implement a behavior like this in Python (cf. Zen of Python no. 2, \"explicit is better than implicit\"), but I haven\u0027t written a patch for that, so I\u0027m not proposing that path at this time.\n\nThanks for your review!",
      "parentUuid": "3e73aa08_877ea413",
      "revId": "2a07eec9664fbcec75699bc78c2affd201a99bff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}