{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b1151d3c_d69ef566",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1017862
      },
      "writtenOn": "2021-08-24T18:23:47Z",
      "side": 1,
      "message": "The OpenROADM MSA specifies a mixed rate equalization method that is not represented by the options implemented in this patch. They also use a psd but based on MC slot-width instead of baudrate. Maybe we should also support that option?",
      "revId": "cf0c0c0ea41f6febe3e7a57a5f630289291f7ae3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58f728a7_984aa4cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2021-08-27T14:04:15Z",
      "side": 1,
      "message": "That\u0027s a good propoosal. However do you know what would be the equivalent atribute for the MC in GNPy ? the spacing ?",
      "parentUuid": "b1151d3c_d69ef566",
      "revId": "cf0c0c0ea41f6febe3e7a57a5f630289291f7ae3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "75909e2e_4fa2c83f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2021-08-27T14:04:15Z",
      "side": 1,
      "message": "Thanks for the review!",
      "revId": "cf0c0c0ea41f6febe3e7a57a5f630289291f7ae3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8733a5f_c525250a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1017862
      },
      "writtenOn": "2021-08-31T11:06:56Z",
      "side": 1,
      "message": "I thought the relevant attribute would be slot_width, which is introduced in the \"New definition of spectral information\" patch by Andrea. Aren\u0027t we moving away from using spacing when introducing flex-grid support?",
      "parentUuid": "58f728a7_984aa4cb",
      "revId": "cf0c0c0ea41f6febe3e7a57a5f630289291f7ae3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f23800f3_4d35560d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2021-09-01T07:26:59Z",
      "side": 1,
      "message": "Whether we call it spacing or slot_width, we still need this user defined value for design, planning and propagation. Right now, slot_width is filled with \"spacing\" specified by user, and we need to keep a user specified value here, instead of one computed based on baud rate. I understand that spacing has a \"fixed grid\" connotation, but in the code it is just defining the per channel width for a given set of channels.\nBesides, for design and planning, we still consider a fully loaded system with same channel type, for which spacing makes sense. \nSo I don\u0027t think that we move away from \"spacing\" with flexgrid, but maybe we can name it differently to be clearer ...",
      "parentUuid": "c8733a5f_c525250a",
      "revId": "cf0c0c0ea41f6febe3e7a57a5f630289291f7ae3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88998451_9f41b606",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1017862
      },
      "writtenOn": "2022-02-16T21:35:34Z",
      "side": 1,
      "message": "So as I said before, I think for psd we should have the option of calculating this based on either baud_rate or slot_width, since the OpenROADM MSA (and TransportPCE) currently specifies power levels based on slot_width.\n\nTo complicate things further, OpenROADM seems to be moving towards defining an additional channel-width attribute that is different from both baud_rate and slot_width:\n\nhttps://github.com/OpenROADM/OpenROADM_MSA_Public/blob/master/model/Specifications/body-rpc-add-operational-modes-to-catalog-10-1.json#L36\n\nMaybe we will also need to add this attribute in GNPy. Alternatively, we could calculate psd based on baud_rate*(1+roll_off) and set roll_off for the OpenROADM Transceiver modes to be consistent with their specified channel-width.",
      "parentUuid": "f23800f3_4d35560d",
      "revId": "cf0c0c0ea41f6febe3e7a57a5f630289291f7ae3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0db0574f_61a16cad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2022-02-21T16:07:34Z",
      "side": 1,
      "message": "I think we should keed the PSD equalization based on baudrate only. including roll-off in the calculation was not OK for Andrea. We can additionally offer additional alternatives as the ones you propose:\n- target_pch_out_db: means same power\n- target_psd_out_mWperGHz : means equalization based on PSD computed with baud rate\n- target_out_mWperSlotWidth: means equalization based on slot width (which should be filled with min_spacing from transceivers). I am not sure we can call that a PSD.\n- target_out_mWperRolloffGHz : means equalization based on baudrate*(1+roll-off)\n\nfor the one you specify, I think the easiest way is to use the power in  the spectrum to differentiate, and keep power equalization.\n(isn\u0027t there a type on the spacings ? on the excel it is specified at 87.5GHz...)\n\nIs that OK for you ?",
      "parentUuid": "88998451_9f41b606",
      "revId": "cf0c0c0ea41f6febe3e7a57a5f630289291f7ae3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0321290c_9acf479c",
        "filename": "gnpy/tools/json_io.py",
        "patchSetId": 8
      },
      "lineNbr": 422,
      "author": {
        "id": 1017862
      },
      "writtenOn": "2021-08-17T09:28:55Z",
      "side": 1,
      "message": "You already added handling of this in parameters.py. I don\u0027t think this check is needed here as well.",
      "range": {
        "startLine": 416,
        "startChar": 12,
        "endLine": 422,
        "endChar": 62
      },
      "revId": "cf0c0c0ea41f6febe3e7a57a5f630289291f7ae3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee0a4215_dc6e1acc",
        "filename": "gnpy/tools/json_io.py",
        "patchSetId": 8
      },
      "lineNbr": 422,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2021-08-27T14:04:15Z",
      "side": 1,
      "message": "OK! I will update with your suggestion",
      "parentUuid": "0321290c_9acf479c",
      "range": {
        "startLine": 416,
        "startChar": 12,
        "endLine": 422,
        "endChar": 62
      },
      "revId": "cf0c0c0ea41f6febe3e7a57a5f630289291f7ae3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3be3b3bf_47064e72",
        "filename": "gnpy/tools/json_io.py",
        "patchSetId": 8
      },
      "lineNbr": 422,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2021-08-27T15:24:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ee0a4215_dc6e1acc",
      "range": {
        "startLine": 416,
        "startChar": 12,
        "endLine": 422,
        "endChar": 62
      },
      "revId": "cf0c0c0ea41f6febe3e7a57a5f630289291f7ae3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}