{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ed3a52ee_bd0624f3",
        "filename": "docs/json.rst",
        "patchSetId": 2
      },
      "lineNbr": 207,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-07-13T09:23:39Z",
      "side": 1,
      "message": "This is adding docs for something which was previously not documented. That\u0027s a good change, but it is not related to the rest of this commit. Please ensure that it\u0027s split into a separate one.",
      "range": {
        "startLine": 177,
        "startChar": 0,
        "endLine": 207,
        "endChar": 101
      },
      "revId": "87a43209716baa4baef1ecd5e00d50f0efaf179a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95d1466f_bfd34ead",
        "filename": "docs/json.rst",
        "patchSetId": 2
      },
      "lineNbr": 207,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-07-13T16:14:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ed3a52ee_bd0624f3",
      "range": {
        "startLine": 177,
        "startChar": 0,
        "endLine": 207,
        "endChar": 101
      },
      "revId": "87a43209716baa4baef1ecd5e00d50f0efaf179a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3a1a0f8_f6928f67",
        "filename": "gnpy/core/science_utils.py",
        "patchSetId": 2
      },
      "lineNbr": 263,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-07-13T09:23:39Z",
      "side": 1,
      "message": "nit: in an extra commit please; it makes it easier to review.",
      "revId": "87a43209716baa4baef1ecd5e00d50f0efaf179a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80866bce_7f2f5c85",
        "filename": "gnpy/core/science_utils.py",
        "patchSetId": 2
      },
      "lineNbr": 263,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-07-13T16:14:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3a1a0f8_f6928f67",
      "revId": "87a43209716baa4baef1ecd5e00d50f0efaf179a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c90bb949_22902f59",
        "filename": "gnpy/tools/cli_examples.py",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-07-13T09:23:39Z",
      "side": 1,
      "message": "This means that the programmer must not forget to call this default() function. That\u0027s a bad design choice; if something requires initialization, ensure that it *cannot* be used uninitialized -- perhaps via always initializing in the constructor.",
      "revId": "87a43209716baa4baef1ecd5e00d50f0efaf179a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90dfa0f6_2f64355e",
        "filename": "gnpy/tools/cli_examples.py",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-07-13T16:14:35Z",
      "side": 1,
      "message": "There is no need of initialization. I put this default here because if the sim_params are not given, this assures that the default values are considered, which I think is what the code should do.",
      "parentUuid": "c90bb949_22902f59",
      "revId": "87a43209716baa4baef1ecd5e00d50f0efaf179a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "738955f1_91588354",
        "filename": "gnpy/tools/cli_examples.py",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-10-05T07:38:47Z",
      "side": 1,
      "message": "There\u0027s a class which holds some data. This code initializes the class either from the user-supplied data via that call to SimParams.set_params(...), or via loading the default settings through SimParams.default(). That means that the programmer has to rememeber to call .default(), which is not a great pattern.\n\nPlease change the class so that it contains the default values even without a call to .default(). The usual way of doing that is in the class\u0027 constructor.",
      "parentUuid": "90dfa0f6_2f64355e",
      "revId": "87a43209716baa4baef1ecd5e00d50f0efaf179a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb148122_b419f527",
        "filename": "tests/test_parameters.py",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-07-13T09:23:39Z",
      "side": 1,
      "message": "I am low on coffee today, but I don\u0027t understand why this class is needed. The purpose of the \"real class\" SimParams is to act as a global variable (masqueraded in a module namespace). Why is it needed to introduce a derived class here?\n\nIf the reason was that the SimParams did not support writes, then that would have been a reason not to use this hidden global state pattern in the first place, but that class doesn\u0027t look like it.",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 77
      },
      "revId": "87a43209716baa4baef1ecd5e00d50f0efaf179a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1593de46_4c6f21fb",
        "filename": "tests/test_parameters.py",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-07-13T16:14:35Z",
      "side": 1,
      "message": "The class SimParams do support writers, the reason to use a mock class here is to assure that any modification of the global variable last only the time of the specific test and does not affect the behavior of successive tests.\n\nAs in the previous comment, I introduced these modifications in order to assure a fixed state of the global variable, has it was required.",
      "parentUuid": "fb148122_b419f527",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 77
      },
      "revId": "87a43209716baa4baef1ecd5e00d50f0efaf179a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f07b6cdd_723e93cf",
        "filename": "tests/test_parameters.py",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-10-05T07:38:47Z",
      "side": 1,
      "message": "A fixed state for each test run is typically implemented via pytest fixtures directly, without manipulating a global hidden state. I\u0027m sorry, this is one more reason why hiding the state behind a global variable (in this case, a static memeber of a class which is conceptually the exactly same thing) makes things more complicated. Here, the code introduces a shared state, and then the code adds more ways to reset that state. I would *much* prefer a solution where the state is passed explicitly to all places which need it. What disadvantages do you see in that approach?",
      "parentUuid": "1593de46_4c6f21fb",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 77
      },
      "revId": "87a43209716baa4baef1ecd5e00d50f0efaf179a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}