module tip-photonic-equipment {
  yang-version 1.1;
  namespace "https://oopt.telecominfraproject.com/yang/equipment";
  prefix "tip-pe";

  organization "Telecom Infrastructure Project";
  contact "https://github.com/Telecominfraproject/oopt-gnpy";
  description "Catalog of photonic equipment for simulating signal propagation via the OOPT-PSE GNPy tool";

  revision 2020-09-01 {
    description "Initial release";
    reference "Internal documentation";
  }

  typedef db-ratio {
    type decimal64 {
      fraction-digits 2;
    }
    units "dB";
    description "Decibels";
  }

  typedef noise-figure {
    type db-ratio {
      range "3.0 .. 20.0";
    }
    description "Noise Figure of an amplifier";
  }

  typedef gain {
    type db-ratio {
      range "0 .. 40.0";
    }
    description "Gain of an amplifier";
  }

  typedef power {
    type decimal64 {
      fraction-digits 2;
      range "-99.9 .. 30.0";
    }
    units "dBm";
    description "Optical power in dBm";
  }

  typedef carrier-frequency {
    type decimal64 {
      fraction-digits 7;
      range "191.0 .. 197.0";
    }
    units "THz";
    description "Optical frequency of a signal";
  }

  typedef frequency-channel-spacing {
    type decimal64 {
      fraction-digits 7;
      range "6.25 .. 200.0";
    }
    units "GHz";
    description "Channel spacing";
  }

  typedef frequency-raman-pump {
    type decimal64 {
      fraction-digits 3;
      range "196.0 .. 260.0";
    }
    units "THz";
    description "Optical frequency of a Raman pumping laser";
  }

  typedef baud-rate {
    type decimal64 {
      fraction-digits 4;
      range "10 .. 130";
    }
    units "Gbaud";
    description "Symbol rate";
  }

  typedef roll-off {
    type decimal64 {
      fraction-digits 4;
      range "0 .. 1";
    }
    description "Roll-off parameter (β) of the TX pulse shaping filter. This assumes a raised-cosine filter.";
  }

  typedef cd {
    type decimal64 {
      fraction-digits 2;
      range "-50000 .. 50000";
    }
    units "ps × nm⁻¹";
    description "Chromatic Dispersion (CD).";
  }

  typedef pmd {
    type decimal64 {
      fraction-digits 4;
    }
    units "ps";
    description "Polarization mode dispersion (PMD).";
  }

  typedef polynomial-coefficient {
    type decimal64 {
      fraction-digits 12;
    }
    description "One coefficient within a polynomial";
  }

  grouping cubic-polynomial-coefficients {
    description "Coefficients for a polynomial of a third degree: f(x) = a*x³ + b*x² + c*x + d";
    leaf a {
      type polynomial-coefficient;
      mandatory true;
      description "Cubic (x³) coefficient";
    }
    leaf b {
      type polynomial-coefficient;
      mandatory true;
      description "Quadratic (x²) coefficient";
    }
    leaf c {
      type polynomial-coefficient;
      mandatory true;
      description "Linear (x) coefficient";
    }
    leaf d {
      type polynomial-coefficient;
      mandatory true;
      description "Offset (+) coefficient";
    }
  }

  grouping amp-spectrum-profile {
    description "Changes in amplifier's operation as a function of frequency";

    list gain-ripple {
      leaf frequency {
        type carrier-frequency;
        description "Frequency for the specific gain ripple deviation";
      }

      leaf gain-ripple {
        type db-ratio;
        mandatory true;
        description "Gain ripple deviation at a given frequency";
      }

      key "frequency";

      description "Amplifier gain ripple excursion comb list in dB across the frequency range";
    }

    list nf-ripple {
      leaf frequency {
        type carrier-frequency;
        description "Frequency for the specific NF ripple deviation";
      }

      leaf nf-ripple {
        type db-ratio;
        mandatory true;
        description "NF ripple deviation at a given frequency";
      }

      key "frequency";

      description "Amplifier NF ripple excursion comb list in dB across the frequency range";
    }

    list dynamic-gain-tilt {
      leaf frequency {
        type carrier-frequency;
        description "Frequency for the specific NF ripple deviation";
      }

      leaf dynamic-gain-tilt {
        type db-ratio;
        mandatory true;
        description "DGT at a specified frequency";
      }

      key "frequency";

      description "Dynamic Gain Tilt (DGT) refers to a relative change of gain
      at a given frequency when compared to a reference frequency.

      Intro about the model: https://telecominfraproject.workplace.com/groups/OOPT.PSE/permalink/957144244450445/
      Relevant paper: https://www.osapublishing.org/jlt/abstract.cfm?uri=JLT-18-3-343";
    }
  }

  grouping amp-common {
    description "Properties common to all EDFAs except the composite models";

    leaf frequency-min {
      type carrier-frequency;
      default 191.325;
      description "Minimal frequency supported by this amplifier

      This refers to the edge of the optical spectrum, not to a central frequency of a fixed grid.";
    }

    leaf frequency-max {
      type carrier-frequency;
      default 196.125;
      description "Maximal frequency supported by this amplifier

      This refers to the edge of the optical spectrum, not to a central frequency of a fixed grid.";
    }

    leaf has-output-voa {
      type boolean;
      default false;
      description "If true, output VOA is present.

      An amplifier with an output VOA can be pushed to operate at its the max-power-out if the output VOA is available.";
    }

    leaf gain-flatmax {
      type gain;
      mandatory true;
      description "Maximal gain of the nominal range (without entering the extended range)

      Once the amplifier's gain gets pushed into the extended range, it begins to tilt as specified in the dynamic-gain-tilt.";
    }

    leaf max-power-out {
      type power;
      mandatory true;
      description "Maximal output power at the amplifier's output port

      The total signal output power will not be allowed beyond this value.";
    }
  }


  list amplifier {
    key "type";
    description "Available amplifier (EDFA) models";

    leaf type {
      type string;
      description "Brief identification of the amplifier model. This is used for cross-referencing from topology data.";
    }

    uses amp-common {
      when "count(composite) = 0";
      description "Common parameters for all EDFAs except aggregated ones";
    }

    leaf gain-min {
      type gain;
      mandatory true;
      description "Minimal possible gain of the amplifier

      If the amplifier's gain is set below this value, the amplifier's input is automatically padded with an attenuator,
      and the NF is increased by the attenuation of this padding.";
    }

    choice noise-model {
      mandatory true;
      description "What simulation algorithm to use for this amplifier model";

      case polynomial-NF {
        container polynomial-NF {
          description "Whitebox model with detailed information about gain ripple, NF ripple and dynamic gain tilt

          Polynomial coefficients for NF calculation:

            f(x) = a*x³ + b*x² + c*x + d

            NF = f(gain_max - gain)

          This model can be also used for fixed-gain fixed-NF amplifiers. In that case, use:

            a = b = c = 0
            d = NF";

          uses cubic-polynomial-coefficients;
        }
      }

      case min-max-NF {
        container min-max-NF {
          description "Operator-focused model

          Performance is defined by the minimal and maximal NF. These are especially suited to model a dual-coil
          EDFA with a VOA in between.";

          leaf nf-min {
            type noise-figure;
            mandatory true;
            description "Minimal Noise Figure (operating at the point of the maximal flat gain)

            See gain-flatmax.";
          }

          leaf nf-max {
            type noise-figure;
            mandatory true;
            description "Maximal Noise Figure (operating at the minimal gain)";
          }
        }
      }

      case OpenROADM-ILA {
        container OpenROADM-ILA {
          description "EDFA model based on the OpenROADM specification for an ILA

          OpenROADM describes amplifier performance in terms of an incremental OSNR as a function of input power:

            Incremental OSNR = a*Pᵢₙ³ + b*Pᵢₙ² + c*Pᵢₙ + d
          ";

          uses cubic-polynomial-coefficients;
        }
      }

      case OpenROADM-preamp {
        container OpenROADM-preamp {
          presence true;
          description "Linear impairments of the MW-MW path within an OpenROADM ROADM node

          Unlike GNPy which simulates the preamplifier and the booster separately as two amplifiers for best accuracy,
          the OpenROADM specification mandates a certain performance level for a combination of these two amplifiers.
          For the express path, the effective noise mask comprises the preamplifier and the booster.
          When terminating a channel, the same effective noise mask is mandated for a combination of the preamplifier
          and the drop stage.

          This NF model provides all of the linear impairments to the signal, including those which are incurred by
          the booster in a real network.";
        }
      }

      case OpenROADM-booster {
        container OpenROADM-booster {
          presence true;
          description "A faux, \"zero-noise\" amplifier for use along with OpenROADM-preamp as a booster.";
        }
      }

      case composite {
        container composite {
          description "Dual-stage amplifier combines two distinct amplifiers

          The first amplifier will be always operated at its maximal gain (and therefore its best NF).";

          leaf preamp {
            type leafref {
              path "/tip-pe:amplifier/type";
            }
            must "count(deref(.)/../composite) = 0" {
              error-message "First (preamp) stage of a composite amplifier cannot be a composite amplifier";
            }
            must "../../gain-min >= deref(.)/../gain-min" {
              error-message "Minimal total gain of a composite EDFA cannot be lower that the minimal gain of the preamp";
            }
            mandatory true;
            description "Amplifier type used as a preamplifier, i.e., the first stage";
          }

          leaf booster {
            type leafref {
              path "/tip-pe:amplifier/type";
            }
            must "count(deref(.)/../composite) = 0" {
              error-message "Second (booster) stage of a composite amplifier cannot be a composite amplifier";
            }
            must "(deref(.)/../frequency-min <= deref(../preamp)/../frequency-max) and
                  (deref(.)/../frequency-max >= deref(../preamp)/../frequency-min)" {
              error-message "booster/preamp operating frequencies do not overlap";
            }
            mandatory true;
            description "Amplifier type used as a booster, i.e., the second stage";
          }
        }
      }

      case raman-approximation {
        container raman-approximation {
          description "Emulate a Raman amplifier with a possibly negative NF

          This NF model assumes a particular, fixed NF. It is similar to the polynomial-NF model, except that the
          effective NF value is fixed (and therefore it does not vary with the amplifier's operating point), and
          that the effective NF can be described as a negative value.

          Use this for model to (roughly) emulate a Raman amplifier when the detailed description of Raman pumps
          is not available from the equipment vendor.";

          leaf nf {
            type db-ratio {
              range "-5.0 .. 20.0";
            }
            mandatory true;
            description "Noise Figure (NF) of the amplifier";
          }
        }
      }
    }

    uses amp-spectrum-profile {
      when "count(deref(.)/composite) = 0";
    }

    leaf model-precision {
      type enumeration {
        enum public-approximation {
          description "These data come from a publicly available datasheet, and as such might be only an approximate representation";
        }
        enum reasonably-precise {
          description "The GNPy team believes that these are reasonably accurate";
        }
      }
      default reasonably-precise;
      description "How precise are the modeling data

      If a simulation runs with only approximate inputs, the simulation results might be \"tainted\" with inaccuracies.";
    }
  }


  list fiber {
    key "type";
    description "Available fiber types";

    leaf type {
      type string;
      description "Unique identification of the fiber type. This is used for cross-referencing from topology data.";
    }

    leaf chromatic-dispersion {
      type decimal64 {
        fraction-digits 6;
        range "-25 .. 25";
      }
      units "ps × nm⁻¹ × km⁻¹";
      mandatory true;
      description "Chromatic dispersion";
    }

    leaf chromatic-dispersion-slope {
      type decimal64 {
        fraction-digits 8;
        range "0 .. 0.1";
      }
      units "ps × nm⁻² × km⁻¹";
      default "0.07";
      description "Chromatic dispersion slope is related to the β₃ coefficient

      Cf. Abramczyk, Halina. Dispersion phenomena in optical fibers. Virtual European University on Lasers, 2005.

      http://mitr.p.lodz.pl/evu/lectures/Abramczyk3.pdf";
    }

    leaf gamma {
      type decimal64 {
        fraction-digits 8;
        range "0.5 .. 2.5";
      }
      units "W⁻¹ × km⁻¹";
      mandatory true;
      description "Fiber's γ coefficient

      See, e.g., A. Carena, G. Bosco, V. Curri, P. Poggiolini, M. Tapia Taiba, and F. Forghieri. Statistical characterization
      of PM-QPSK signals after propagation in uncompensated fiber links. In European Conference on Optical Communications,
      2010, 1–3. IEEE, 2010-09.

      URL: http://ieeexplore.ieee.org/document/5621509/
      doi:10.1109/ECOC.2010.5621509";
    }

    leaf pmd-coefficient {
      type decimal64 {
        fraction-digits 10;
        range "0 .. 10";
      }
      units "ps × √(km)⁻¹";
      mandatory true;
      description "Polarization mode dispersion (PMD) coefficient";
    }

    list raman-efficiency {
        key "delta-frequency";
        description "Efficiency of Raman amplification in the fiber medium per operating frequency

        See, e.g., J. Bromage. Raman Amplification for Fiber Communications Systems. In J. Lightwave Technol.  22, 79- (2004).";

        leaf delta-frequency {
          type decimal64 {
            fraction-digits 3;
            range "0 .. 60";
          }
          units "THz";
          description "Spectral difference between the pumping photon and the one receiving energy";
        }

        leaf cr {
          type decimal64 {
            fraction-digits 12;
            range "0 .. 1";
          }
          mandatory true;
          description "Normalized Raman efficiency (the Cᵣ parameter)";
        }
    }
  }


  list transceiver {
    key "type";
    description "Available transceivers";

    leaf type {
      type string;
      description "Unique identification of the transceiver type. This is used for cross-referencing from topology data.";
    }

    leaf frequency-min {
      type carrier-frequency;
      default 191.35;
      description "Minimal frequency supported by this transceiver model";
    }

    leaf frequency-max {
      type carrier-frequency;
      default 196.1;
      description "Maximal frequency supported by this transceiver model";
    }

    list mode {
      key "name";
      min-elements 1;
      description "Operating mode of a transceiver";

      leaf name {
        type string;
        description "Name of this operating mode";
      }

      leaf bit-rate {
        type uint16 {
          range "100 .. 1000";
        }
        units "Gbits * s⁻¹";
        description "Data bit rate";
      }

      leaf baud-rate {
        type baud-rate;
        mandatory true;
        description "Symbol baud rate";
      }

      leaf required-osnr {
        type db-ratio {
          range "10..40";
        }
        mandatory true;
        description "Minimal required OSNR at the Rx port per 0.1nm of bandwidth";
      }

      leaf in-band-tx-osnr {
        type db-ratio;
        mandatory true;
        description "Worst-case guaranteed initial OSNR at the Tx port per 0.1nm of bandwidth

        Only the in-band OSNR is considered.";
      }

      leaf grid-spacing {
        type frequency-channel-spacing;
        mandatory true;
        description "Minimal grid spacing

        This includes the effective channel spectral bandwidth as well as any operational constraints and policies.";
      }

      leaf tx-roll-off {
        type roll-off;
        mandatory true;
        description "Roll-off parameter (β) of the TX pulse shaping filter. This assumes a raised-cosine filter.";
      }

      leaf max-chromatic-dispersion {
        type cd;
        description "Maximal allowed CD (a hard limit)";
      }

      leaf max-polarization-mode-dispersion {
        type pmd {
          range "0 .. 500";
        }
        description "Maximal allowed PMD (a hard limit)";
      }

      list chromatic-and-polarization-dispersion-penalty {
        key "chromatic-dispersion  polarization-mode-dispersion";

        leaf chromatic-dispersion {
          type cd;
          must ". <= ../../max-chromatic-dispersion" {
            error-message "CD in the penalty matrix exceeds receiver tolerance";
          }
          description "CD for a given penalty";
        }

        leaf polarization-mode-dispersion {
          type pmd {
            range "0 .. 500";
          }
          must ". <= ../../max-polarization-mode-dispersion" {
            error-message "PMD in the penalty matrix exceeds receiver tolerance";
          }
          description "PMD for a given penalty";
        }

        leaf penalty {
          type db-ratio {
            range "-5 .. 10";
          }
          mandatory true;
          description "Resulting GSNR penalty at the specified CD and PMD";
        }

        description "GSNR penalty for a combination of a CD and PMD

        The receiver performance should be de-rated by a given `penalty` for a specified combination of CD and PMD.
        GNPy will use linear approximation between the provided datapoints in the CD/PMD matrix.
        ";
      }
    }
  }


  list roadm {
    key "type";
    description "ROADM - Reconfigurable Optical Add/Drop Multiplexer";

    leaf type {
      type string;
      description "Unique identification of the transponder type. This is used for cross-referencing from topology data.";
    }

    leaf add-drop-osnr {
      type db-ratio;
      mandatory true;
      description "OSNR penalty introduced by the Add stage and the Drop stage of this ROADM model

      Effective degradation of the signal, taking into account both the Add and the Drop stages of this ROADM model.";
    }

    leaf target-channel-out-power {
      type power;
      mandatory true;
      description "Per-channel target TX power towards the egress amplifier

      Within GNPy, a ROADM is expected to attenuate any signal that enters the ROADM node to this level. This can be
      overridden on a per-link basis in the network topology.";
    }

    leaf polarization-mode-dispersion {
      type pmd {
        range "0 .. 5";
      }
      mandatory true;
      description "Polarization mode dispersion (PMD) penalty of the express path within this ROADM model";
    }

    leaf-list compatible-preamp {
      type leafref {
        path "/tip-pe:amplifier/type";
      }
      description "A set of allowed amplifier types to be used in the ingress direction

      If empty, autodesign is allowed to pick any amplifier as a preamp.";
    }

    leaf-list compatible-booster {
      type leafref {
        path "/tip-pe:amplifier/type";
      }
      description "A set of allowed amplifier types to be used in the egress direction

      If empty, autodesign is allowed to pick any amplifier as a booster.";
    }

  }

}
