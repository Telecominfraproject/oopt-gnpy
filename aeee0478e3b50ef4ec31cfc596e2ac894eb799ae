{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0007e208_31d5d554",
        "filename": "gnpy/core/exceptions.py",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-07T16:39:03Z",
      "side": 1,
      "message": "Why not just use SpectrumError everywhere?",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 41,
        "endChar": 59
      },
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f0e7a5da_4686782f",
        "filename": "gnpy/core/exceptions.py",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-11T23:36:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0007e208_31d5d554",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 41,
        "endChar": 59
      },
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "616f32a6_4611c5ec",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 18,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-07T16:39:03Z",
      "side": 1,
      "message": "This is undocumented. It appears to be used for rounding up when converting from the baud rate to the spectrum width, please add a docstring.",
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07d7cc31_ffc117a0",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 18,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-11T23:36:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "616f32a6_4611c5ec",
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "064c9b1c_6c66695f",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 51,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-07T16:39:03Z",
      "side": 1,
      "message": "This syntax only works on numpy arrays, not on regular Python lists. I\u0027m OK with mandating numpy arrays here, but please add at least the type annotation to make this obvious. And I see that this might be easier to implement with numpy \u003e\u003d 1.20 and python \u003e\u003d 3.8, so we should briefly touch this on the coders call to make sure it isn\u0027t a problem for anybody.",
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16af745c_33e089b9",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 51,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-11T23:36:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "064c9b1c_6c66695f",
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91d50eda_8d8ac591",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 70,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-07T16:39:03Z",
      "side": 1,
      "message": "Please add a docstring for this property. We\u0027ve talked over this one on several calls, so it would be nice to have a nice definition written down somewhere.",
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "000db354_271ea6b0",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 70,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-11T23:36:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "91d50eda_8d8ac591",
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1799b255_5c8568ab",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 84,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-07T16:39:03Z",
      "side": 1,
      "message": "Please document this.",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 84,
        "endChar": 23
      },
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "518457fa_45b7b705",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 84,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-11T23:36:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1799b255_5c8568ab",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 84,
        "endChar": 23
      },
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08842ac3_0598ea60",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 137,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-07T16:39:03Z",
      "side": 1,
      "message": "I do not think that the term \"SNR\" is consistently used to refer to just the nonlinear part of the GSNR in the literature, so I suggest using a more descriptive name.",
      "range": {
        "startLine": 135,
        "startChar": 0,
        "endLine": 137,
        "endChar": 43
      },
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae2978e9_311a7018",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 137,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-11T23:36:01Z",
      "side": 1,
      "message": "I added the properties gsnr, osnr and snr in the first version because I think they can be useful. I realized that they are not good definitions as it would be complicated to include additional snr degradations in a coherent manner. Moreover, these quantities are already calculated within the Transceiver. Therefore, I think removing them is the best solution at this stage.",
      "parentUuid": "08842ac3_0598ea60",
      "range": {
        "startLine": 135,
        "startChar": 0,
        "endLine": 137,
        "endChar": 43
      },
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0a9cfd3_f1eea6ac",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 137,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-16T17:14:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ae2978e9_311a7018",
      "range": {
        "startLine": 135,
        "startChar": 0,
        "endLine": 137,
        "endChar": 43
      },
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "448cfa3a_2e1e7db6",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 178,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-07T16:39:03Z",
      "side": 1,
      "message": "nit: I know it\u0027s a matter of style, but this is rather verbose for my personal taste. Why not just:\n \nreturn SpectralInformation(\n    frequency\u003dappend(self.frequency, si.frequency),\n    slot_width\u003dappend(self.slot_width, si.slot_width),\n    ...\n    )",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 178,
        "endChar": 38
      },
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2feee5a2_1a35f1bd",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 178,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-11T23:36:01Z",
      "side": 1,
      "message": "I applied this choice also in other functions that have the same structure.",
      "parentUuid": "448cfa3a_2e1e7db6",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 178,
        "endChar": 38
      },
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48d8ed41_14c6edf2",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 178,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-16T17:14:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2feee5a2_1a35f1bd",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 178,
        "endChar": 38
      },
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a68761ac_63fbeade",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 178,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-17T13:52:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2feee5a2_1a35f1bd",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 178,
        "endChar": 38
      },
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85e00838_03e1a8db",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 185,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-07T16:39:03Z",
      "side": 1,
      "message": "Please remove the try/except wrapper; it removes possibly useful information (\"what was wrong with the attempted spectrum\") by replacing it with a hardcoded error message.",
      "range": {
        "startLine": 184,
        "startChar": 0,
        "endLine": 185,
        "endChar": 78
      },
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61986ebc_1c078569",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 185,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-11T23:36:01Z",
      "side": 1,
      "message": "I would rather keep this try/except wrapper. The reason is that in adding two spectrum instances we can assume that both are separately well defined (neither baud rates nor slot widths overlapping). The only situation that can prevent the creation of the total spectrum is that there is an overlapping of two or more channels from the two spectra and the error string that would be created is \u0027Spectrum required slot widths larger than the frequency spectral distances\u0027(without any additional information). Therefore, I think that it would be more meaningful a specific error indicating that the two spectrum cannot be summed. \nIn other words, in this function I take advantage of the checks that are already performed in the constructor of the SppectralInformation (in order to avoid code duplicates) but the nature of the error is completely different and should be indicated in two different places of the code.\nI hope this better clarify my choice, let me know what is your opinion on this.",
      "parentUuid": "85e00838_03e1a8db",
      "range": {
        "startLine": 184,
        "startChar": 0,
        "endLine": 185,
        "endChar": 78
      },
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b979205_0023d388",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 185,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-16T17:14:55Z",
      "side": 1,
      "message": "I think you\u0027re right. The error message thrown from the constructor is \"not perfect\" because it only says \"Spectrum required slot widths larger than the frequency spectral distances.\" instead of identifying which channel overlaps which one. I agree that the new error message is actually better here. Thanks!",
      "parentUuid": "61986ebc_1c078569",
      "range": {
        "startLine": 184,
        "startChar": 0,
        "endLine": 185,
        "endChar": 78
      },
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9b9fe8d_66c1a259",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 242,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-07T16:39:03Z",
      "side": 1,
      "message": "This can be moved out of the if/else branches; len(frequency) will always return the correct value once `frequency` has been set.",
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66f79428_2508734e",
        "filename": "gnpy/core/info.py",
        "patchSetId": 8
      },
      "lineNbr": 242,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-11T23:36:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9b9fe8d_66c1a259",
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47df566b_e1a9a775",
        "filename": "tests/test_info.py",
        "patchSetId": 8
      },
      "lineNbr": 45,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-07T16:39:03Z",
      "side": 1,
      "message": "This can be made simpler:\n \nwith pytest.raises(InfoError, match\u003d\u0027Spectra cannot be summed: channels overlapping.\u0027):\n    si +\u003d si\n\n(I had to look it up in the docs :).)",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 45,
        "endChar": 76
      },
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d496192b_879c0a33",
        "filename": "tests/test_info.py",
        "patchSetId": 8
      },
      "lineNbr": 45,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-11T23:36:01Z",
      "side": 1,
      "message": "I applied this choice also in other functions that have the same structure.",
      "parentUuid": "47df566b_e1a9a775",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 45,
        "endChar": 76
      },
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff2182fd_4f1f110e",
        "filename": "tests/test_info.py",
        "patchSetId": 8
      },
      "lineNbr": 45,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-16T17:14:55Z",
      "side": 1,
      "message": "thanks",
      "parentUuid": "d496192b_879c0a33",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 45,
        "endChar": 76
      },
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9596bd1_8e6e12fb",
        "filename": "tests/test_info.py",
        "patchSetId": 8
      },
      "lineNbr": 45,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-17T13:52:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d496192b_879c0a33",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 45,
        "endChar": 76
      },
      "revId": "aeee0478e3b50ef4ec31cfc596e2ac894eb799ae",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}