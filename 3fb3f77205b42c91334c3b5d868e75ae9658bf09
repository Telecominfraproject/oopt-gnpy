{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3ddb3d97_3ed8159f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1017862
      },
      "writtenOn": "2021-05-24T13:30:47Z",
      "side": 1,
      "message": "Andrea, can you take a look and see if this makes sense?",
      "revId": "3fb3f77205b42c91334c3b5d868e75ae9658bf09",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0202b52_60a16c17",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-24T19:15:16Z",
      "side": 1,
      "message": "I hope this is helpful.",
      "revId": "3fb3f77205b42c91334c3b5d868e75ae9658bf09",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a26bd37d_dc563271",
        "filename": "gnpy/core/science_utils.py",
        "patchSetId": 1
      },
      "lineNbr": 362,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-24T19:15:16Z",
      "side": 1,
      "message": "Your solution should work for the specific problem pointed out in the github issue. Probably, a better solution is importing append from numpy and replace this line with\n\u003e\u003e\u003e z \u003d append(arange(0, fiber_length, z_resolution), fiber_length)\n\nas it does not change the value of z_resolution and provides the same result.",
      "range": {
        "startLine": 362,
        "startChar": 8,
        "endLine": 362,
        "endChar": 53
      },
      "revId": "3fb3f77205b42c91334c3b5d868e75ae9658bf09",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31ac1477_28fd7679",
        "filename": "gnpy/core/science_utils.py",
        "patchSetId": 1
      },
      "lineNbr": 362,
      "author": {
        "id": 1017862
      },
      "writtenOn": "2021-05-24T20:19:22Z",
      "side": 1,
      "message": "What is the problem with changing the value of z_resolution, it is not used for anything else? On the other hand, your proposal does not provide the same result when fiber_length is larger than space_resolution since then it will add an extra value to the array, e.g. append(arange(0, 11, 10), 11) \u003d array([ 0, 10, 11]). Maybe that is ok but it is different from how the current code behaves.",
      "parentUuid": "a26bd37d_dc563271",
      "range": {
        "startLine": 362,
        "startChar": 8,
        "endLine": 362,
        "endChar": 53
      },
      "revId": "3fb3f77205b42c91334c3b5d868e75ae9658bf09",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6ceb579_cff4c56c",
        "filename": "gnpy/core/science_utils.py",
        "patchSetId": 1
      },
      "lineNbr": 362,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-24T21:43:58Z",
      "side": 1,
      "message": "You are right, and this is actually an additional bug coming from the first implementation of the Raman solver. In fact, the correct result in your example should be array([ 0, 10, 11]) as it includes the z\u003dfiber_length. As you pointed out, in the current version if fiber_length is not a multiple of z_resolution, this is not the case and the output Raman profile is not calculated at the fiber termination (the science_utils test fails if the z_resolution is changed of just one meter, which is an unreasonable behaviour). This is an additional reason to use my proposal that restores the right behaviour (it is also included in the last Raman restructuring patch).\n\nRegarding your question, in my opinion is better to avoid the overwriting of configuration parameters for debugging and future implementations reasons.",
      "parentUuid": "31ac1477_28fd7679",
      "range": {
        "startLine": 362,
        "startChar": 8,
        "endLine": 362,
        "endChar": 53
      },
      "revId": "3fb3f77205b42c91334c3b5d868e75ae9658bf09",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80a907af_de96d02a",
        "filename": "gnpy/core/science_utils.py",
        "patchSetId": 1
      },
      "lineNbr": 362,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-24T21:53:55Z",
      "side": 1,
      "message": "Andrea, can you please send such a patch *and* explain what it\u0027s about in its commit message? While I think I can follow Jonas\u0027 reasoning here that replacing a vector [0] with vector e.g. [0, 5172] \"probably makes sense\", I have no clue if this also applies to non-uniform spacing which you\u0027ll get in the majority of cases with a simple append (i.e., [0, 10k, 20k, 30k, 36123]). Don\u0027t take me wrong, it makes sense if you say so, but I would prefer a self-contained commit which explains the details.\n\nToo bad \"space_resolution\" is unfortunately not documented anywhere in the code (or in the docs), so I cannot really reason about the code\u0027s behavior.",
      "parentUuid": "a26bd37d_dc563271",
      "range": {
        "startLine": 362,
        "startChar": 8,
        "endLine": 362,
        "endChar": 53
      },
      "revId": "3fb3f77205b42c91334c3b5d868e75ae9658bf09",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "119d7e87_35276d90",
        "filename": "gnpy/core/science_utils.py",
        "patchSetId": 1
      },
      "lineNbr": 362,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-24T22:15:36Z",
      "side": 1,
      "message": "The patch that I am referring to is the \"505386:  Raman Solver restructuring and speed up\" that is under revision. \n\nIt is crucial to include the z\u003dfiber_span element because the Raman profile (which include the loss profile) has to be calculated at the fiber termination as it quantify the real loss experienced by the signal. Following your example, the Raman profile at 30km would be different from the one at 36.123km. Considering a loss coefficient of 0.2dB/km, this would result in almost 1.5dB not considered by the following amplifier. Moreover, in case of short fiber spans, the NLI generated in those additional 6 km is not negligible as the power of the signal is still relatively high. Lastly, the position of the back propagating pumps has to coincide with the fiber termination to obtain a realistic simulation.\n\nI am including the information of this simulation parameter in the documentation that includes the description of the new patches and that I have not time to finish yet.",
      "parentUuid": "80a907af_de96d02a",
      "range": {
        "startLine": 362,
        "startChar": 8,
        "endLine": 362,
        "endChar": 53
      },
      "revId": "3fb3f77205b42c91334c3b5d868e75ae9658bf09",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}