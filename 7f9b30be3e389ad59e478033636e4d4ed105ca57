{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "83b6e67c_d9af3eaf",
        "filename": "gnpy/core/info.py",
        "patchSetId": 11
      },
      "lineNbr": 19,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-16T17:14:55Z",
      "side": 1,
      "message": "I don\u0027t follow, and I don\u0027t think that this is checked or enforced in the code. Am I missing something?",
      "range": {
        "startLine": 19,
        "startChar": 3,
        "endLine": 19,
        "endChar": 99
      },
      "revId": "7f9b30be3e389ad59e478033636e4d4ed105ca57",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "172f9d79_c8dcc548",
        "filename": "gnpy/core/info.py",
        "patchSetId": 11
      },
      "lineNbr": 19,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-17T13:52:29Z",
      "side": 1,
      "message": "This is something that should be true in real implementations. We had a discussion on this during the coders call and I think the only alternative is to set 6.25 GHz instead of 12.5 GHz. In any real implementation, the spacing between two adjacent channels is a multiple of this base sloth width. In order to avoid any restriction in the input central frequencies this condition is not forced, instead, some checks are present in the SpectralInformation constructor to avoid any overlapping.",
      "parentUuid": "83b6e67c_d9af3eaf",
      "range": {
        "startLine": 19,
        "startChar": 3,
        "endLine": 19,
        "endChar": 99
      },
      "revId": "7f9b30be3e389ad59e478033636e4d4ed105ca57",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acd6dde3_26cd0f7c",
        "filename": "gnpy/core/info.py",
        "patchSetId": 11
      },
      "lineNbr": 19,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-17T14:28:18Z",
      "side": 1,
      "message": "The documentation confuses me. The docstring for a variable called \"BASE_SLOT_WIDTH\" mentions certain assumptions, yet these assumptions are (as far as I can tell) not checked anywhere. I do not understand how these assumptions are relevant for this variable; please rephrase that docstring. Perhaps my suggestion in the other comment (DEFAULT_SLOT_WIDTH_STEP) can be used?",
      "parentUuid": "172f9d79_c8dcc548",
      "range": {
        "startLine": 19,
        "startChar": 3,
        "endLine": 19,
        "endChar": 99
      },
      "revId": "7f9b30be3e389ad59e478033636e4d4ed105ca57",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "289baf9b_2655d8ec",
        "filename": "gnpy/core/info.py",
        "patchSetId": 11
      },
      "lineNbr": 21,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-16T17:14:55Z",
      "side": 1,
      "message": "If this is needed (see my comment about default values), can you perhaps rephrase it like this:\n \nChannels with unspecified slot width will have their spectrum allocation determined based on the Baud rate and rounded up to the nearest BASE_SLOT_WIDTH.\n\nLooking that that, perhaps there\u0027s a better name:\n \nDEFAULT_SLOT_WIDTH_INCREMENT",
      "range": {
        "startLine": 19,
        "startChar": 100,
        "endLine": 21,
        "endChar": 18
      },
      "revId": "7f9b30be3e389ad59e478033636e4d4ed105ca57",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27aa0ca7_0149d32d",
        "filename": "gnpy/core/info.py",
        "patchSetId": 11
      },
      "lineNbr": 21,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-17T14:28:18Z",
      "side": 1,
      "message": "On a second thought, perhaps DEFAULT_SLOT_WIDTH_STEP describes that variable\u0027s purpose better?",
      "parentUuid": "289baf9b_2655d8ec",
      "range": {
        "startLine": 19,
        "startChar": 100,
        "endLine": 21,
        "endChar": 18
      },
      "revId": "7f9b30be3e389ad59e478033636e4d4ed105ca57",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1855412_3e276a5a",
        "filename": "gnpy/core/info.py",
        "patchSetId": 11
      },
      "lineNbr": 21,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2021-05-17T15:04:59Z",
      "side": 1,
      "message": "I just add a comment here: we will need to harmonize because, if a given transceiver is defined, its min_spacing is defined with transceivers library. If it is not (case of transission_main_example, I think we should include roll-off in the slot width determination (eg a 49Gbaud signal does not fit in 50GHz in general!). Besides spacing in this case is already determined by the user in this case. so this figure might only be used for consistency checks",
      "parentUuid": "27aa0ca7_0149d32d",
      "range": {
        "startLine": 19,
        "startChar": 100,
        "endLine": 21,
        "endChar": 18
      },
      "revId": "7f9b30be3e389ad59e478033636e4d4ed105ca57",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f02c77c6_d58e38b8",
        "filename": "gnpy/core/info.py",
        "patchSetId": 11
      },
      "lineNbr": 220,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-16T17:14:55Z",
      "side": 1,
      "message": "I don\u0027t understand how the default values are supposed to behave, and the documentation doesn\u0027t explain that to me. My suggestion is to remove the default values from the function\u0027s signature.",
      "revId": "7f9b30be3e389ad59e478033636e4d4ed105ca57",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7ade00d_e4a0d14d",
        "filename": "gnpy/core/info.py",
        "patchSetId": 11
      },
      "lineNbr": 220,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-17T13:52:29Z",
      "side": 1,
      "message": "I don\u0027t understand why we should remove the defaults as they can be evaluated if they are not mandatory, e.g. see the slot width. Do these evaluations should be moved in a different place in the code? Even more, if we assume that all the inputs are provided, the constructor of the SpectralInformation can be directly used. The purpose of this function is to simplify the creation of an arbitrary spectrum.",
      "parentUuid": "f02c77c6_d58e38b8",
      "revId": "7f9b30be3e389ad59e478033636e4d4ed105ca57",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03b63ac2_028c5c20",
        "filename": "gnpy/core/info.py",
        "patchSetId": 11
      },
      "lineNbr": 220,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-17T14:28:18Z",
      "side": 1,
      "message": "I would prefer not to add complexity unless we have a need for that -- and that need should be demonstrated by a use within this repository. I\u0027m not sure if I understand you correctly, but perhaps you need this outside of gnpy-the-public-project? In that case I would prefer to only merge what is absolutely neccessary for gnpy\u0027s own use at this stage, and leave out the convenience functions for later. If that means that we won\u0027t need this function at all, that\u0027s fine with me.\n\nWhat is the use case for creating an arbitrary spectrum with, say, no power defined? Does the convenience of not having to write:\n\n power\u003d0\n\noutweigh the cost of having a rather messy function such as the `dimension_rehsape` above that does not just reshape an array, but also happens to substitute None with some other value? I\u0027m afraid I just don\u0027t find that intuitive and readable :(. If there were documentation, that would have helped, but if it is not needed by this patch series, my (strong) suggestion is to just remove that.",
      "parentUuid": "e7ade00d_e4a0d14d",
      "revId": "7f9b30be3e389ad59e478033636e4d4ed105ca57",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0258e47d_fc2d15c2",
        "filename": "gnpy/core/info.py",
        "patchSetId": 11
      },
      "lineNbr": 220,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2021-05-17T15:04:59Z",
      "side": 1,
      "message": "I have used this create_arbitrary_spectral_information  in my changes... I guess this could be changed, but I found it useful",
      "parentUuid": "03b63ac2_028c5c20",
      "revId": "7f9b30be3e389ad59e478033636e4d4ed105ca57",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bda5ba1a_db27d0cf",
        "filename": "gnpy/core/info.py",
        "patchSetId": 11
      },
      "lineNbr": 220,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-17T15:13:06Z",
      "side": 1,
      "message": "Got an example? I saw just use_initial_spectrum() in commit 3c5d28c4b, and it looks like that particular usage doesn\u0027t rely on default values.",
      "parentUuid": "0258e47d_fc2d15c2",
      "revId": "7f9b30be3e389ad59e478033636e4d4ed105ca57",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98f344f5_c8157b99",
        "filename": "gnpy/core/info.py",
        "patchSetId": 11
      },
      "lineNbr": 220,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2021-05-17T15:36:00Z",
      "side": 1,
      "message": "Yes, this is where I used it, and yes I did use some of the default values (CD, PMD, for example are not provided when I instantiate the spectrum). I think that keeping the function makes sense to me:\nI called it to create my spectrum, with scalar values. If we remove this function I will need to do the SI creation on my own, no ?",
      "parentUuid": "bda5ba1a_db27d0cf",
      "revId": "7f9b30be3e389ad59e478033636e4d4ed105ca57",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3039a0e1_445e8e04",
        "filename": "tests/test_info.py",
        "patchSetId": 11
      },
      "lineNbr": 28,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-17T14:28:18Z",
      "side": 1,
      "message": "I think it would actually be cleaner to move these into the constructor, i.e.:\n \nsi \u003d create_arbitrary_spectrum_information(frequency\u003d[...], baud_rate\u003d32e9, signal\u003d[1, 1, 1])\n\nAlso everywhere else, please.\n\nIf the create_arbistraty_spectrum_information gets removed, we won\u0027t need this test file at all -- just add a docstring with a bunch of example invocations of SpectrumInformation, similar to how it\u0027s done here:\n\nhttps://github.com/Telecominfraproject/oopt-gnpy/blob/c4235fa61c49b90305329e5e96b5d1e103610c36/gnpy/core/utils.py#L275-L291",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 28,
        "endChar": 22
      },
      "revId": "7f9b30be3e389ad59e478033636e4d4ed105ca57",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71682b73_519b4a46",
        "filename": "tests/test_info.py",
        "patchSetId": 11
      },
      "lineNbr": 28,
      "author": {
        "id": 1017876
      },
      "writtenOn": "2021-05-17T14:43:42Z",
      "side": 1,
      "message": "The defaults cannot be placed as you are suggesting because they depend on the frequency dimension.\nI will try an alternative definition of the function in order to have a cleaner version.",
      "parentUuid": "3039a0e1_445e8e04",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 28,
        "endChar": 22
      },
      "revId": "7f9b30be3e389ad59e478033636e4d4ed105ca57",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bfa867d_c383a6d0",
        "filename": "tests/test_info.py",
        "patchSetId": 11
      },
      "lineNbr": 28,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2021-05-17T15:13:06Z",
      "side": 1,
      "message": "That\u0027s not what I meant. I suggested to, within this test suite, replace a code like this one:\n \nfrequency \u003d [193.25e12, 193.3e12, 193.35e12]\nbaud_rate \u003d 32e9\nsignal \u003d [1, 1, 1]\nsi \u003d create_arbitrary_spectral_information(frequency\u003dfrequency, baud_rate\u003dbaud_rate, signal\u003dsignal)\n\nwith a code like this:\n \nsi \u003d create_arbitrary_spectral_information(frequency\u003d[193.25e12, 193.3e12, 193.35e12], baud_rate\u003d32e9, signal\u003d[1, 1, 1])\n\nBut perhaps we can get by without an explicit test file and stash everything into the docstring.",
      "parentUuid": "71682b73_519b4a46",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 28,
        "endChar": 22
      },
      "revId": "7f9b30be3e389ad59e478033636e4d4ed105ca57",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}